package com.abnamro.stpl.util

/**
 * Class for Maven specific utilities that can be used by all pipelines.
 */
class Maven implements Serializable {

    private static final String RELEASES = 'releases'
    private static final String SNAPSHOTS = 'snapshots'

    private final def steps
    private final String mavenTool
    private final String jdkTool
    private final String systemLetterCode

    private String settingsXml

    /**
     * Creates a new Maven utility class and sets systemLetterCode to AAA (Dummy value).
     *
     * @param steps the pipeline dsl context
     * @param mavenTool string of the mavenTool (retrieved via the 'tool' dsl command)
     * @param jdkTool string of the jdkTool (retrieved via the 'tool' dsl command)
     */
    Maven(steps, String mavenTool, String jdkTool) {
        this(steps, mavenTool, jdkTool, "AAA")
    }

    /**
     * Creates a new Maven utility class.
     *
     * @param steps the pipeline dsl context
     * @param mavenTool string of the mavenTool (retrieved via the 'tool' dsl command)
     * @param jdkTool string of the jdkTool (retrieved via the 'tool' dsl command)
     * @param systemLetterCode the system letter code for the application
     */
    Maven(steps, String mavenTool, String jdkTool, String systemLetterCode) {
        assert steps: 'I need steps to be valid'
        assert mavenTool: 'I need mavenTool to be valid'
        assert jdkTool: 'I need jdkTool to be valid'
        assert systemLetterCode: 'I need systemLetterCode to be valid'

        this.steps = steps
        this.mavenTool = mavenTool
        this.jdkTool = jdkTool
        this.systemLetterCode = systemLetterCode
    }

    /**
     * Get method to retrieve the settingsXml location.
     * As a getter method will trigger some auto-processing that is broken in Jenkins 2.30-2.50 we cannot name it get.
     *
     * @return the location of the settingsXml, empty String if not generated by this instance
     */
    String retrieveSettingsXmlLocation(){
        return this.settingsXml
    }

    /**
     * Executes a shell command, using the appropriate method depending on the platform.
     * It will use 'sh' for linux and else 'bat'.
     *
     * @param command the command to execute
     */
    private void shellCommand(String command) {
        if (steps.isUnix()) {
            steps.sh command
        } else {
            steps.bat command
        }
    }

    /**
     * When you do not use this class to generate the settings.xml but want to use mvnWithSettings command.
     * It will set the settings.xml location and mvnWithSettings will use this from then on.
     *
     * @param location the location of the settings.xml relative to where mvn commands are execute.
     */
    void putSettingsXmlLocation(String location) {
        assert location: 'Location needs to be valid'
        this.settingsXml = location
    }

    /**
     * Executes a maven command.
     * It will make sure the context is set for based upon the supplied JDK and Maven tools.
     *
     * The command will be prefixed with the maven executable, so to achieve 'mvn -v', you call mvn('-v').
     *
     * @param mavenCommand the maven command to execute
     */
    void mvn(String mavenCommand) {
        steps.withEnv(["M2_HOME=$mavenTool", "JAVA_HOME=${jdkTool}"]) {
            String buildCommand = "${mavenTool}/bin/mvn ${mavenCommand}"
            shellCommand(buildCommand)
        }
    }

    /**
     * Executes a maven command with the settingsXml that is generated with this tool.
     * It will make sure the context is set for based upon the supplied JDK and Maven tools.
     *
     * The command will be prefixed with the maven executable, so to achieve 'mvn -v', you call mvn('-v').
     *
     * @param mavenCommand the maven command to execute
     */
    void mvnWithSettings(String mavenCommand) {
        if (!this.settingsXml) {
            steps.error 'No settings.xml set'
        }

        steps.withEnv(["M2_HOME=$mavenTool", "JAVA_HOME=${jdkTool}"]) {
            String buildCommand = "${mavenTool}/bin/mvn ${mavenCommand} -s ${this.settingsXml}"
            shellCommand(buildCommand)
        }
    }

    /**
     *  Calls  writeSettingsXml(String CODE, String credentialsId, boolean isMainlineBuild) with SystemLetterCode supplied at creation.
     * @param credentialsId the credentialsId to use for the Nexus repositories
     * @param isMainlineBuild if true, only adds releases mirror, if false also a snapshots mirror
     * @return where the settings.xml is written to
     */
    String writeSettingsXml(String credentialsId, boolean isMainlineBuild) {
        assert credentialsId: 'I need credentialsId to be valid'
        assert this.systemLetterCode: 'I need systemLetterCode to be valid'
        return writeSettingsXml(this.systemLetterCode, credentialsId, isMainlineBuild)
    }

    /**
     * Will write a settings.xml into the current directory.
     *
     * The settings will use the CODE for the service id's and the mirror.
     * Utilizing the standard maven setup of the master-pom and the standard nexus setup.
     *
     * Assumed:
     * <ul>
     *  <li>there is a ${CODE}-releases (hosted) repository</li>
     *  <li>there is a ${CODE}-releases-virtual (group) repository</li>
     *  <li>there is a ${CODE}-snapshot (hosted) repository</li>
     *  <li>there is a technical user with the supplied credentialsId, that can use above repositories</li>
     * </ul>
     *
     * @param CODE the system letter code (i.e. SOLO)
     * @param credentialsId the credentialsId to use for the Nexus repositories
     * @param isMainlineBuild if true, only adds releases mirror, if false also a snapshots mirror
     * @return where the settings.xml is written to
     */
    String writeSettingsXml(String CODE, String credentialsId, boolean isMainlineBuild) {
        assert CODE: 'I need CODE to be valid'
        assert credentialsId: 'I need credentialsId to be valid'
        this.settingsXml = "../${CODE}/settings.xml"

        def releasesMirror = createMirrorTags(CODE, RELEASES)
        def snapshotsMirror = ''
        if (!isMainlineBuild) {
            snapshotsMirror = createMirrorTags(CODE, SNAPSHOTS)
        }

        steps.withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: credentialsId, passwordVariable: 'PSS', usernameVariable: 'USR']]) {

            mvn("--encrypt-password ${steps.env.PSS} > enc.txt")
            def encFile = steps.readFile 'enc.txt'
            String ENC = encFile.trim()
            String userName = steps.env.USR

            String releasesServer = createServerTags(CODE, userName, ENC, RELEASES)
            String snapshotsServer = createServerTags(CODE, userName, ENC, SNAPSHOTS)

            steps.writeFile encoding: 'UTF-8', file: this.settingsXml, text: """
                 <settings>
                    <mirrors>
                        ${releasesMirror}
                        ${snapshotsMirror}
                    </mirrors>

                    <servers>
                        ${releasesServer}
                        ${snapshotsServer}
                    </servers>
                </settings>
            """
        }

        if (steps.isUnix()) {
            steps.sh('rm enc.txt')
        } else {
            steps.bat('del enc.txt')
        }
        return this.settingsXml
    }

    /**
     * Create the server tag for the maven settings xml.
     *
     * @param CODE the systemLetterCode for this application (group), part of the Nexus repository name
     * @param user the username for the server
     * @param pass the password for the server
     * @param snapshotOrRelease should be either snapshots or releases
     * @return the created xml server tag
     */
    private String createServerTags(String CODE, String user, String pass, String snapshotOrRelease){
        return """
        <server>
            <id>${CODE}-${snapshotOrRelease}</id>
            <username>${user}</username>
            <password>${pass}</password>
        </server>
        """
    }

    /**
     * Create the mirror tag for the maven settings xml.
     *
     * @param CODE the SOLO system letter code
     * @param snapshotOrRelease 'snapshots' or 'releases'
     * @return the created xml mirror tag
     */
    private String createMirrorTags(String CODE, String snapshotOrRelease) {
        return """
            <mirror>
                <id>${CODE}-${snapshotOrRelease}-Mirror</id>
                <mirrorOf>central</mirrorOf>
                <name>${CODE}-${snapshotOrRelease}-Mirror</name>
                <url>${steps.env.mavenBaseUrl}/${CODE}-${snapshotOrRelease}-virtual/
                </url>
            </mirror>
        """
    }
}
